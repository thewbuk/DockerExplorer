const options = [
  { value: 'attach', label: 'Attach input/output' },
  { value: 'build', label: 'Build an image ' },
  { value: 'builder', label: 'Manage builds' },
  { value: 'buildx', label: 'BuildKit' },
  { value: 'checkpoint', label: 'Manage checkpoints' },
  { value: 'commit', label: 'Create a new image from changes' },
  { value: 'compose ', label: 'Compose' },
  { value: 'config', label: 'Manage Docker configs' },
  { value: 'container', label: 'Manage containers' },
  { value: 'context', label: 'Manage contexts' },
  { value: 'cp', label: 'Copy files/folders' },
  { value: 'create', label: 'Create a new container' },
  { value: 'diff', label: 'Inspect changes' },
  { value: 'events', label: 'Get real time events' },
  { value: 'exec', label: 'Run a command' },
  { value: 'export', label: 'Export a containerâ€™s filesystem' },
  { value: 'history', label: 'Show the history' },
  { value: 'image', label: 'Manage images' },
  { value: 'images', label: 'List images' },
  { value: 'import', label: 'Import the contents from a tarball' },
  { value: 'info', label: 'Display system-wide information' },
  { value: 'inspect', label: 'Return information on Docker objects' },
  { value: 'kill', label: 'Kill running containers' },
  { value: 'load', label: 'Load an image' },
  { value: 'login', label: 'Log in to a Docker registry' },
  { value: 'logout', label: 'Log out from a Docker registry' },
  { value: 'logs', label: 'Fetch the logs of a container' },
  { value: 'manifest', label: 'Manage Docker image manifests' },
  { value: 'network', label: 'Manage networks' },
  { value: 'node', label: 'Manage Swarm nodes' },
  { value: 'pause', label: 'Pause all processes' },
  { value: 'plugin', label: 'Manage plugins' },
  { value: 'port', label: 'List port mappings' },
  { value: 'ps', label: 'List containers' },
  { value: 'pull', label: 'Pull an image or a repository' },
  { value: 'push', label: 'Push an image or a repository' },
  { value: 'rename', label: 'Rename a container' },
  { value: 'restart', label: 'Restart containers' },
  { value: 'rm', label: 'Remove containers' },
  { value: 'rmi', label: 'Remove images' },
  { value: 'run', label: 'Run a command' },
  { value: 'save', label: 'Save one or more images' },
  { value: 'search', label: 'Search the Docker Hub for images' },
  { value: 'secret', label: 'Manage Docker secrets' },
  { value: 'service', label: 'Manage services' },
  { value: 'stack', label: 'Manage Docker stacks' },
  { value: 'start', label: 'Start stopped containers' },
  { value: 'stats', label: 'Display resource usage statistics' },
  { value: 'stop', label: 'Stop running containers' },
  { value: 'swarm', label: 'Manage Swarm' },
  { value: 'system', label: 'Manage Docker' },
  { value: 'tag', label: 'Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE' },
  { value: 'top', label: 'Display the running processes' },
  { value: 'trust', label: 'Manage trust' },
  { value: 'unpause', label: 'Unpause all processes' },
  { value: 'update', label: 'Update configuration' },
  { value: 'version', label: 'Show the Docker version' },
  { value: 'volume', label: 'Manage volume' },
  { value: 'wait', label: 'Block until containers stop' },
];

export const primaryOptions = options.sort((x, y) => {
  if (x.value < y.value) {
    return -1;
  }
  if (x.value > y.value) {
    return 1;
  }
  return 0;
});
